= Widgeon

Widgeon is a widget system for Ruby on Rails.

=== Installation

$ ./script/plugin install http://talia.discovery-project.eu/svn/talia/repository/widgeon/trunk

=== Uninstallation

$ ./script/plugin delete widgeon

Notice: this operation will *destroy* all your widgets.

== Using an existing widget

In your view files:
<%= widget(:widget_name) %>

You can also pass params:
<%= widget(:widget_name, :param_one => 'one', :param_two => 'two') %>

== Developing a widget

First create a widget (see related section), the process will create two files:
and helper and a class.
For convention all params passed to the <tt>widget</tt> method will be available
into the widget object.

Example:
  <%= widget(:sidebar, :entries => 1..3) %>
  
  @sidebar_widget.entries #=> 1..3

Now you can easily guess that in your helpers you can use an instance variable
called (by convention) with the 'underscored' name of the class
(HelloWorldWidget #=> @hello_world_widget).

Now I can image that it isn't enough for you ;-) and I know you want to
manipulate the params passed to #widget. Ok, I have a solution: implement
#before_render in your class and this will be called for you. :-P

Example:
  app/views/index.rhtml:
  <h1><%= widget(:greeter, :name => 'luca') %></h1>

  widgets/greeter_widget.rb:
  class GreeterWidget < Widgeon::Widget
    def before_render
      name = name.titleize
    end
  end

  app/views/widgets/greeter/_greeter.rhtml:
  Welcome <%= @greeter_widget.name %>!!
  
  The result will be:
  <h1>Welcome Luca!!</h1>

=== Stylesheets

You may include a stylesheet file with the name <tt><widget_name>.css</tt> in
a widget's directory. By default, the stylesheet will be rendered as
an inline <style> element in the HTML code. You can disable this
behaviour by setting <tt>Widgeon::Widget::inline_styles = false</tt>.

If you disable the inline styles, you will have to provide the widget's
CSS styles by another mechanism.

=== Helpers

You can provide a collection of helpers in a file called <tt><widget_name>_helper.rb</tt>
in the widget's directory. If you provide that file, it *must* declare
a module called <tt><WidgetName>Helper</tt>. All methods in that
module will be available as helper in *all* views - be careful not
to overwrite existing helpers.
  
== Create a widget

  $ ./script/generate widget HelloWorld

This creates <tt>widgets/hello_world_widget.rb</tt> and
<tt>app/views/widgets/hello_world/_hello_world_widget.rhtml</tt>.

== Destroy a widget

  $ ./script/destroy widget HelloWorld

This deletes <tt>widgets/hello_world_widget.rb</tt> and
<tt>app/views/widgets/hello_world/_hello_world_widget.rhtml</tt>.